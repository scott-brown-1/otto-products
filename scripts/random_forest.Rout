
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #########################
> ### Imports and setup ###
> #########################
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(doParallel)
Loading required package: foreach

Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
> 
> setwd('..')
> source('./scripts/utils.R')
> source('./scripts/wrangling.R')
> PARALLEL <- T
> 
> #########################
> ####### Load Data #######
> #########################
> 
> ## Load data
> train <- load_train()
Rows: 61878 Columns: 95
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (1): target
dbl (94): id, feat_1, feat_2, feat_3, feat_4, feat_5, feat_6, feat_7, feat_8...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- load_test()
Rows: 144368 Columns: 94
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (94): id, feat_1, feat_2, feat_3, feat_4, feat_5, feat_6, feat_7, feat_8...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #########################
> ## Feature Engineering ##
> #########################
> 
> set.seed(2003)
> 
> ## parallel tune grid
> 
> if(PARALLEL){
+   cl <- makePSOCKcluster(6)
+   registerDoParallel(cl)
+ }
> 
> ## Set up preprocessing
> prepped_recipe <- setup_train_recipe(train, encode=F, smote_K=5, pca_threshold=0.8)
> 
> ## Bake recipe
> bake(prepped_recipe, new_data=train)
# A tibble: 61,878 × 44
   target    PC01    PC02   PC03    PC04    PC05    PC06    PC07   PC08    PC09
   <fct>    <dbl>   <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>   <dbl>
 1 Class_1 -0.385  -0.262 -0.341  0.810  -0.0406  0.595   0.140  0.218  -0.663 
 2 Class_1 -1.69   -0.927 -0.819 -0.267  -0.497  -0.0609 -0.157  0.184   0.130 
 3 Class_1 -1.21   -0.896 -0.899  0.277   0.0364 -0.280  -0.221  0.994   0.0682
 4 Class_1 24.5   -33.1    2.03  -2.19    2.06    0.857  -1.21   0.508   0.835 
 5 Class_1 -0.773  -0.405 -1.19   0.822   0.217  -0.199  -0.875  1.58   -0.964 
 6 Class_1  5.18   -3.57  -1.01   2.77    0.768   0.280  -0.951  2.11   -0.461 
 7 Class_1 -0.218  -1.05  -0.961  0.320   0.782   0.143  -0.587  0.430  -0.556 
 8 Class_1 -1.70   -0.891 -0.404  0.0128 -0.0361 -0.136  -0.0921 0.210  -0.0359
 9 Class_1  0.543   0.281 -1.42   2.01   -0.352   0.797   0.0844 0.0296 -0.406 
10 Class_1 -0.615  -0.419 -1.15   0.0439 -0.562  -0.482  -0.136  0.377  -0.0276
# ℹ 61,868 more rows
# ℹ 34 more variables: PC10 <dbl>, PC11 <dbl>, PC12 <dbl>, PC13 <dbl>,
#   PC14 <dbl>, PC15 <dbl>, PC16 <dbl>, PC17 <dbl>, PC18 <dbl>, PC19 <dbl>,
#   PC20 <dbl>, PC21 <dbl>, PC22 <dbl>, PC23 <dbl>, PC24 <dbl>, PC25 <dbl>,
#   PC26 <dbl>, PC27 <dbl>, PC28 <dbl>, PC29 <dbl>, PC30 <dbl>, PC31 <dbl>,
#   PC32 <dbl>, PC33 <dbl>, PC34 <dbl>, PC35 <dbl>, PC36 <dbl>, PC37 <dbl>,
#   PC38 <dbl>, PC39 <dbl>, PC40 <dbl>, PC41 <dbl>, PC42 <dbl>, PC43 <dbl>
> bake(prepped_recipe, new_data=test)
# A tibble: 144,368 × 43
     PC01   PC02   PC03    PC04    PC05   PC06   PC07     PC08    PC09   PC10
    <dbl>  <dbl>  <dbl>   <dbl>   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>  <dbl>
 1 -1.25  -0.547 -0.434  0.112   2.62   -3.83   1.78   0.0817  -0.690   0.562
 2  2.65   1.34   6.03  -2.03   -0.724   2.15   0.319  0.530   -0.896  -1.08 
 3  1.34   1.56   5.46  -2.32   -1.65    1.85   1.31   0.900   -0.140  -0.637
 4 -0.193  0.218  0.945  0.458   3.59   -0.741 -0.870 -1.32     3.93   -0.694
 5  0.674 -1.25  -2.18   0.770  -1.85   -0.351 -0.235 -0.632    0.454  -0.179
 6 -0.771 -1.41  -1.92   0.393  -0.456  -0.798  1.87   0.153   -1.04   -2.19 
 7  1.62   1.39   0.535 -0.996   0.0489 -2.39  -1.69   0.192    1.06    0.801
 8 -1.78  -0.914 -0.765  0.0714  1.00   -0.694  0.679 -0.641   -0.456  -0.430
 9 -1.63  -1.67  -0.539 -0.113   0.668  -1.07   0.375 -0.00441 -0.0704 -0.220
10 -1.72  -1.16  -1.07   0.115  -0.682  -0.189  0.423  0.433   -0.313  -1.46 
# ℹ 144,358 more rows
# ℹ 33 more variables: PC11 <dbl>, PC12 <dbl>, PC13 <dbl>, PC14 <dbl>,
#   PC15 <dbl>, PC16 <dbl>, PC17 <dbl>, PC18 <dbl>, PC19 <dbl>, PC20 <dbl>,
#   PC21 <dbl>, PC22 <dbl>, PC23 <dbl>, PC24 <dbl>, PC25 <dbl>, PC26 <dbl>,
#   PC27 <dbl>, PC28 <dbl>, PC29 <dbl>, PC30 <dbl>, PC31 <dbl>, PC32 <dbl>,
#   PC33 <dbl>, PC34 <dbl>, PC35 <dbl>, PC36 <dbl>, PC37 <dbl>, PC38 <dbl>,
#   PC39 <dbl>, PC40 <dbl>, PC41 <dbl>, PC42 <dbl>, PC43 <dbl>
> 
> #########################
> ## Fit Classifier Model #
> #########################
> 
> ## Define model
> rf_model <- rand_forest(
+   mtry = tune(), #tune(),
+   min_n = tune(), #tune(),
+   trees = 400
+ ) %>%
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> ## Define workflow
> rf_wf <- workflow(prepped_recipe) %>%
+   add_model(rf_model)
> 
> ## Grid of values to tune over
> tuning_grid <- grid_regular(
+   mtry(range=c(10,25)),#(range=c(4,ncol(train))),
+   min_n(),
+   levels = 4)
> 
> ## Split data for CV
> folds <- vfold_cv(train, v = 4, repeats=1)
> 
> ## Run the CV
> cv_results <- rf_wf %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(mn_log_loss))
> 
> ## Find optimal tuning params
> best_params <- cv_results %>%
+   select_best('mn_log_loss')
> 
> print(best_params)
# A tibble: 1 × 3
   mtry min_n .config              
  <int> <int> <chr>                
1    15     2 Preprocessor1_Model02
> 
> ## Fit workflow
> final_wf <- rf_wf %>%
+   finalize_workflow(best_params) %>%
+   fit(data = train)
> 
> final_wf <- rf_wf %>%
+   fit(data = train)
Warning messages:
1: tune columns were requested but there were 43 predictors in the data. 43 will be used. 
2: tune samples were requested but there were 145098 rows in the data. 145098 will be used. 
> 
> ## Predict new y
> output <- predict(final_wf, new_data=test, type='prob') %>%
+   bind_cols(test$id,.) %>%
+   rename(
+     id=...1,
+     Class_1=.pred_Class_1,
+     Class_2=.pred_Class_2,
+     Class_3=.pred_Class_3,
+     Class_4=.pred_Class_4,
+     Class_5=.pred_Class_5,
+     Class_6=.pred_Class_6,
+     Class_7=.pred_Class_7,
+     Class_8=.pred_Class_8,
+     Class_9=.pred_Class_9)
New names:
• `` -> `...1`
> 
> #LS: penalty, then mixture
> vroom::vroom_write(output,'./outputs/rf_preds.csv',delim=',')
> 
> if(PARALLEL){
+   stopCluster(cl)
+ }
> 
> proc.time()
     user    system   elapsed 
 2008.683    10.864 26637.140 
